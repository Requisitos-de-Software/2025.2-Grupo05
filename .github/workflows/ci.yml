# .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  # Executar em push para main e devel
  push:
    branches:
      - main
      - devel

  # Executar em pull requests para main e devel (PROTE√á√ÉO)
  pull_request:
    branches:
      - main
      - devel
    types: [opened, synchronize, reopened]

# Configura√ß√µes globais
env:
  PYTHON_VERSION: "3.11"

jobs:
  # ================================================================
  # JOB 1: VALIDA√á√ÉO DE DOCUMENTA√á√ÉO (Required para PRs)
  # ================================================================
  validate:
    name: "üîç Validate Documentation"
    runs-on: ubuntu-latest

    steps:
      # Checkout com fetch completo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Python otimizado
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      # Instalar depend√™ncias do MkDocs
      - name: Install MkDocs dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Validar estrutura de arquivos obrigat√≥rios
      - name: Check required files
        run: |
          test -f requirements.txt || (echo "‚ùå requirements.txt not found" && exit 1)
          test -f mkdocs.yml || (echo "‚ùå mkdocs.yml not found" && exit 1)
          test -d docs || (echo "‚ùå docs/ directory not found" && exit 1)
          echo "‚úÖ Required files and directories present"

      # Verificar sintaxe de arquivos Python (anima√ß√µes)
      - name: Check Python syntax
        run: |
          echo "üêç Checking Python syntax for animation scripts..."
          find . -name "*.py" -type f -exec python -m py_compile {} \; || (echo "‚ùå Python syntax errors found" && exit 1)
          echo "‚úÖ Python syntax validation passed"

      # Validar build do MkDocs (estrutura e links)
      - name: Validate MkDocs build
        run: |
          echo "üìö Building MkDocs documentation..."
          mkdocs build --strict --verbose

      # Validar Markdown com configura√ß√£o espec√≠fica para documenta√ß√£o
      - name: Lint Markdown files
        uses: DavidAnson/markdownlint-cli2-action@v15
        with:
          # Usar configura√ß√£o do arquivo .markdownlint-cli2.jsonc se existir
          config: |
            {
              "MD013": { "line_length": 120, "code_blocks": false, "tables": false },
              "MD033": false,
              "MD041": false,
              "MD036": false,
              "MD001": true,
              "MD022": { "lines_above": 1, "lines_below": 1 }
            }
          globs: |
            **/*.md
            !site/**
            !node_modules/**
            !venv/**

      # Verificar estrutura b√°sica da documenta√ß√£o
      - name: Check documentation structure
        run: |
          echo "üìã Checking documentation structure..."

          # Verificar se existe README principal
          test -f README.md || echo "‚ö†Ô∏è README.md not found in root"

          # Verificar estrutura b√°sica do docs/
          test -f docs/index.md || echo "‚ö†Ô∏è docs/index.md not found"

          # Listar estrutura para debug
          echo "üìÅ Current documentation structure:"
          find docs -type f -name "*.md" | head -20 || echo "No markdown files found in docs/"

          echo "‚úÖ Documentation structure check completed"

  # ================================================================
  # JOB 2: SUGEST√ïES DE CORRE√á√ÉO (apenas em falha)
  # ================================================================
  fix-suggestions:
    name: "üõ†Ô∏è Fix Suggestions"
    runs-on: ubuntu-latest
    if: failure() && needs.validate.result == 'failure'
    needs: validate

    steps:
      - name: Show fix commands
        run: |
          echo "################################################################"
          echo "#                                                              #"
          echo "#          ‚ùå ERROS DE DOCUMENTA√á√ÉO - COMANDOS PARA CORRIGIR   #"
          echo "#                                                              #"
          echo "################################################################"
          echo ""
          echo "üìù Para corrigir erros de Markdown:"
          echo "   npx markdownlint-cli2 --fix \"**/*.md\" \"#site\""
          echo ""
          echo "üêç Para verificar sintaxe Python (anima√ß√µes):"
          echo "   python -m py_compile arquivo.py"
          echo ""
          echo "üìö Para testar build do MkDocs:"
          echo "   mkdocs build --strict"
          echo ""
          echo "üîç Para servir localmente:"
          echo "   mkdocs serve"
          echo ""
          echo "üìã Para verificar estrutura:"
          echo "   ls -la docs/"
          echo "   cat mkdocs.yml"
          echo ""
          echo "################################################################"

  # ================================================================
  # JOB 3: DEPLOY (apenas main com valida√ß√£o aprovada)
  # ================================================================
  deploy:
    name: "üöÄ Deploy Documentation"
    runs-on: ubuntu-latest
    needs: validate
    # Deploy apenas em push para main (n√£o PRs) e com valida√ß√£o OK
    if: |
      success() && 
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build documentation
        run: |
          echo "üìö Building documentation for deployment..."
          mkdocs build --verbose

      - name: Deploy to GitHub Pages
        id: deployment
        run: |
          echo "üöÄ Deploying to GitHub Pages..."
          mkdocs gh-deploy --force --clean --verbose
          echo "page_url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ================================================================
  # JOB 4: NOTIFICA√á√ÉO DE STATUS
  # ================================================================
  notify:
    name: "üì¢ Notify Status"
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always()

    steps:
      - name: Notify success
        if: needs.validate.result == 'success'
        run: |
          echo "‚úÖ Documenta√ß√£o validada com sucesso!"
          echo "üìö Site: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

      - name: Notify failure
        if: needs.validate.result == 'failure'
        run: |
          echo "‚ùå Valida√ß√£o da documenta√ß√£o falhou."
          echo "üí° Verifique os erros de Markdown, Python ou estrutura acima."
