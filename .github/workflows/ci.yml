name: CI & Deploy

on:
  # Só roda em push para main (deploy) ou devel (validação)
  push:
    branches: [main, devel]

  # Roda em PRs, mas só se NÃO for push simultâneo
  pull_request:
    branches: [main, devel]
    types: [opened, synchronize, reopened]

jobs:
  # ===================================================================
  # JOB 1: Validação Completa
  # ===================================================================
  validate:
    name: "🔍 Validação Geral"
    runs-on: ubuntu-latest
    # Evita execução duplicada: se for PR de uma branch do mesmo repo, pula o push
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && !contains(github.event.head_commit.message, 'Merge pull request'))

    steps:
      - name: 🔦 Checkout
        uses: actions/checkout@v4

      - name: 🧰 Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 💾 Instalar dependências Python
        run: |
          pip install -r requirements.txt
          pip install ruff

      - name: 🎨 Ruff format (checar estilo)
        id: ruff-format
        run: ruff format --check .
        continue-on-error: true

      - name: 🛁 Ruff check (bug/lint)
        id: ruff-check
        run: ruff check .
        continue-on-error: true

      - name: 🐍 Python syntax (animações)
        id: python-syntax
        run: find . -name "*.py" -type f -exec python -m py_compile {} \;
        continue-on-error: true

      - name: 📚 MkDocs build
        id: mkdocs-build
        run: mkdocs build --strict --verbose
        continue-on-error: true

      - name: 📝 MarkdownLint
        id: markdown-lint
        uses: DavidAnson/markdownlint-cli2-action@v15
        with:
          globs: |
            **/*.md
            !site/**
            !node_modules/**
            !venv/**
        continue-on-error: true

      - name: ❌ Exibir comandos de correção se houver erros
        if: |
          steps.ruff-format.outcome == 'failure' ||
          steps.ruff-check.outcome == 'failure' ||
          steps.python-syntax.outcome == 'failure' ||
          steps.mkdocs-build.outcome == 'failure' ||
          steps.markdown-lint.outcome == 'failure'
        run: |
          echo "################################################################"
          echo "#         ❌ ERROS ENCONTRADOS - COMO CORRIGIR                  #"
          echo "################################################################"

          if [[ "${{ steps.ruff-format.outcome }}" == "failure" ]]; then
            echo "🦄 Ruff format: ruff format ."
          fi

          if [[ "${{ steps.ruff-check.outcome }}" == "failure" ]]; then
            echo "⭐ Ruff check: ruff check . --fix"
          fi

          if [[ "${{ steps.python-syntax.outcome }}" == "failure" ]]; then
            echo "🐍 Python: python -m py_compile arquivo.py"
          fi

          if [[ "${{ steps.markdown-lint.outcome }}" == "failure" ]]; then
            echo "📝 Markdown: Corrija links vazios [Foto]() e [Link]()"
          fi

          if [[ "${{ steps.mkdocs-build.outcome }}" == "failure" ]]; then
            echo "📚 MkDocs: mkdocs build --strict"
          fi

          echo "################################################################"
          exit 1

  # ===================================================================
  # JOB 2: Deploy (SÓ em push para main)
  # ===================================================================
  deploy:
    name: "🚀 Deploy"
    needs: validate
    runs-on: ubuntu-latest
    # Deploy APENAS em push para main (nunca em PRs)
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Instalar dependências
        run: pip install -r requirements.txt

      - name: Build docs
        run: mkdocs build --verbose

      - name: Deploy to GitHub Pages
        run: mkdocs gh-deploy --force --clean --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
