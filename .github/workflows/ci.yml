# .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  # Executar em push para main e devel
  push:
    branches:
      - main
      - devel

  # Executar em pull requests para main e devel (PROTE√á√ÉO)
  pull_request:
    branches:
      - main
      - devel
    types: [opened, synchronize, reopened]

# Configura√ß√µes globais
env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # ================================================================
  # JOB 1: VALIDA√á√ÉO COMPLETA (Required para PRs)
  # ================================================================
  validate:
    name: "üîç Validate Code & Docs"
    runs-on: ubuntu-latest

    steps:
      # Checkout com fetch completo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Python otimizado
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      # Instalar depend√™ncias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install ruff black bandit safety

      # Validar estrutura de arquivos
      - name: Check required files
        run: |
          test -f requirements.txt || (echo "‚ùå requirements.txt not found" && exit 1)
          test -f mkdocs.yml || (echo "‚ùå mkdocs.yml not found" && exit 1)
          echo "‚úÖ Required files present"

      # Seguran√ßa - verificar vulnerabilidades
      - name: Security check with Bandit
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium || echo "‚ö†Ô∏è Security warnings found"

      # Seguran√ßa - verificar depend√™ncias
      - name: Check dependencies for vulnerabilities
        run: |
          safety check --json --output safety-report.json || echo "‚ö†Ô∏è Dependency vulnerabilities found"

      # Lint Python com Ruff
      - name: Lint Python with Ruff
        run: |
          echo "üîç Running Ruff linting..."
          ruff check . --output-format=github

      # Verificar formata√ß√£o Python
      - name: Check Python formatting with Black
        run: |
          echo "üé® Checking Python code formatting..."
          black --check --diff --color .

      # Validar MkDocs build
      - name: Validate MkDocs build
        run: |
          echo "üìö Building MkDocs documentation..."
          mkdocs build --strict --verbose

      # Setup Node.js para markdownlint
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # Validar Markdown
      - name: Lint Markdown files
        uses: DavidAnson/markdownlint-cli2-action@v15
        with:
          globs: |
            **/*.md
            !site/**
            !node_modules/**
            !venv/**
          config: |
            {
              "MD013": { "line_length": 120 },
              "MD033": false,
              "MD041": false
            }

      # Upload artifacts em caso de falha
      - name: Upload validation artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: validation-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 7

  # ================================================================
  # JOB 2: TESTES (Se houver)
  # ================================================================
  test:
    name: "üß™ Run Tests"
    runs-on: ubuntu-latest
    needs: validate
    if: success()

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests (if present)
        run: |
          if [ -d "tests" ] || [ -f "test_*.py" ]; then
            echo "üß™ Running tests..."
            pytest --cov=. --cov-report=xml --cov-report=html
          else
            echo "‚ÑπÔ∏è No tests found, skipping..."
          fi

      - name: Upload coverage reports
        if: success() && hashFiles('coverage.xml') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests

  # ================================================================
  # JOB 3: SUGEST√ïES DE CORRE√á√ÉO (apenas em falha)
  # ================================================================
  fix-suggestions:
    name: "üõ†Ô∏è Fix Suggestions"
    runs-on: ubuntu-latest
    if: failure() && (needs.validate.result == 'failure' || needs.test.result == 'failure')
    needs: [validate, test]

    steps:
      - name: Show fix commands
        run: |
          echo "################################################################"
          echo "#                                                              #"
          echo "#          ‚ùå ERROS ENCONTRADOS - COMANDOS PARA CORRIGIR       #"
          echo "#                                                              #"
          echo "################################################################"
          echo ""
          echo "üé® Para corrigir formata√ß√£o Python:"
          echo "   black ."
          echo ""
          echo "üîß Para corrigir erros de lint Python:"
          echo "   ruff check . --fix"
          echo ""
          echo "üìù Para corrigir erros de Markdown:"
          echo "   npx markdownlint-cli2 --fix \"**/*.md\" \"#site\""
          echo ""
          echo "üîí Para verificar seguran√ßa:"
          echo "   bandit -r ."
          echo "   safety check"
          echo ""
          echo "üìö Para testar MkDocs:"
          echo "   mkdocs build --strict"
          echo ""
          echo "üß™ Para rodar testes:"
          echo "   pytest"
          echo ""
          echo "################################################################"

  # ================================================================
  # JOB 4: DEPLOY (apenas main com valida√ß√£o aprovada)
  # ================================================================
  deploy:
    name: "üöÄ Deploy Documentation"
    runs-on: ubuntu-latest
    needs: [validate, test]
    # Deploy apenas em push para main (n√£o PRs) e com valida√ß√£o OK
    if: |
      success() && 
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build documentation
        run: |
          echo "üìö Building documentation for deployment..."
          mkdocs build --verbose

      - name: Deploy to GitHub Pages
        id: deployment
        run: |
          echo "üöÄ Deploying to GitHub Pages..."
          mkdocs gh-deploy --force --clean --verbose
          echo "page_url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ================================================================
  # JOB 5: NOTIFICA√á√ÉO DE STATUS
  # ================================================================
  notify:
    name: "üì¢ Notify Status"
    runs-on: ubuntu-latest
    needs: [validate, test, deploy]
    if: always()

    steps:
      - name: Notify success
        if: needs.validate.result == 'success' && needs.test.result == 'success'
        run: |
          echo "‚úÖ Pipeline executada com sucesso!"
          echo "üìö Documenta√ß√£o: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

      - name: Notify failure
        if: needs.validate.result == 'failure' || needs.test.result == 'failure'
        run: |
          echo "‚ùå Pipeline falhou. Verifique os logs acima para detalhes."
          echo "üí° Execute os comandos de corre√ß√£o sugeridos."
