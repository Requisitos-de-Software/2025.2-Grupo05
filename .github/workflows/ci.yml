name: CI - Docs & Code

on:
  # Roda a pipeline em todo push e PR para main e devel
  push:
    branches:
      - main
      - devel
  pull_request:
    branches:
      - main
      - devel
    types: [opened, synchronize, reopened]

jobs:
  # ===================================================================
  # 1¬∫ JOB: Valida√ß√£o Geral de C√≥digo, Markdown e Documenta√ß√£o
  # ===================================================================
  ci:
    name: "üîç CI: Valida√ß√£o Geral"
    runs-on: ubuntu-latest

    steps:
      # Checkout do c√≥digo do reposit√≥rio
      - name: üî¶ Checkout
        uses: actions/checkout@v4

      # Prepara o Python para tarefas do projeto
      - name: üß∞ Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Instala depend√™ncias listadas no projeto e ferramentas extra de lint/docs
      - name: üíæ Instalar depend√™ncias
        run: |
          pip install -r requirements.txt
          pip install ruff mkdocs markdownlint-cli2

      # Checa se o formato do c√≥digo Python segue o padr√£o (PEP 8 e Black/Ruff)
      - name: üé® Ruff format (checar estilo)
        run: |
          ruff format --check .
        continue-on-error: true # Segue mesmo se falhar para mostrar todos os erros no final

      # Faz lint completo, apontando poss√≠veis bugs e antipadr√µes no Python
      - name: üõÅ Ruff check (bug/lint)
        run: |
          ruff check .
        continue-on-error: true

      # Verifica a sintaxe de todos os arquivos Python do reposit√≥rio (ex.: anima√ß√µes)
      - name: üêç Python syntax (anima√ß√µes)
        run: |
          set +e
          find . -name "*.py" -type f -exec python -m py_compile {} \;
          result=$?
          if [ "$result" != "0" ]; then
            echo "‚ùå Python syntax errors found"
            exit 1
          fi

      # Faz an√°lise de estilo dos arquivos Markdown usando markdownlint-cli2
      - name: üìù MarkdownLint (markdownlint-cli2)
        uses: DavidAnson/markdownlint-cli2-action@v15
        with:
          globs: |
            **/*.md
            !site/**
            !node_modules/**
            !venv/**

      # Build da documenta√ß√£o com MkDocs (valida links, estrutura, nav etc)
      - name: üìö MkDocs build
        run: |
          mkdocs build --strict --verbose

      # Se algum passo acima falhar, exibe dicas de comandos para corrigir rapidamente
      - name: ‚ùå Exibir comandos de corre√ß√£o se falhar
        if: failure()
        run: |
          echo "################################################################"
          echo "#         ‚ùå ERROS ENCONTRADOS - COMO CORRIGIR                  #"
          echo "################################################################"
          echo "ü¶Ñ Ruff format:  Corrija estilo automaticamente:"
          echo "  ruff format ."
          echo ""
          echo "‚≠ê Ruff check: Visualize/corrija bugs/erros:"
          echo "  ruff check . --fix"
          echo ""
          echo "üêç Python: Corrija sintaxe dos scripts Python:"
          echo "  python -m py_compile arquivo.py"
          echo ""
          echo "üìù Markdown: Corrija formata√ß√£o Markdown:"
          echo "  npx markdownlint-cli2 --fix \"**/*.md\" \"!site\""
          echo ""
          echo "üìö MkDocs: Verifique estrutura/links:"
          echo "  mkdocs build --strict"
          echo "################################################################"
          exit 1

  # ===================================================================
  # 2¬∫ JOB: Deploy da documenta√ß√£o (S√ì se todas as valida√ß√µes passarem)
  # ===================================================================
  deploy:
    name: "üöÄ Deploy Docs"
    needs: ci
    runs-on: ubuntu-latest
    # S√≥ faz deploy se todas valida√ß√µes passaram, push na main (n√£o PRs)
    if: ${{ success() && github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    steps:
      # Checkout da branch main para deploy final
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Prepara Python para rodar o MkDocs
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Instala somente o necess√°rio para gerar/docs
      - name: Instalar depend√™ncias MkDocs
        run: |
          pip install -r requirements.txt
          pip install mkdocs

      # Gera build da documenta√ß√£o do zero
      - name: Build docs
        run: mkdocs build --verbose

      # Faz deploy do site para o GitHub Pages (gh-pages branch)
      - name: Deploy to GitHub Pages
        run: mkdocs gh-deploy --force --clean --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

